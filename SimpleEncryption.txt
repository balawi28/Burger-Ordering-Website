#!/bin/bash

msg_welcome(){
    echo ""
    echo "Welcome to Ecnryption/Decryption Program."
    echo ""
}

msg_menu(){
    echo "========= MENU ========="
    echo "Type 'e' for encryption."
    echo "Type 'd' for decryption."
    echo "Type 'x' to exit."
    echo "========================"
    echo ""
}

msg_file_dne(){
    echo "Warning: Please make sure you entered correct file name or directory"
	echo "for example: 'file.txt' or 'myDir/file.txt'"
    echo ""
}

msg_bad_choice(){
    echo "Warning: Please choose only 'e' or 'd'."
    echo ""
}

msg_bad_file(){
    echo "Error: The file contains non-alphabetic characters."
    echo ""    
}

main_menu(){
    # keep looping through main menu until user exits
    while true; do
        msg_menu
        read -n 1 -p "Your choice: " choice
        echo ""
        case "$choice" in
            'e') encryption ;;
            'd') decryption ;;
            'x') break ;;
            *)   msg_bad_choice ;;
        esac
    done
}

read_plain_filename(){
    read -p "Please input the name of the plaintext file: " file_name
    echo ""
}

read_cipher_filename(){
    read -p "Please input the name of the ciphertext file: " file_name
    echo ""
}

# converts character to its ascii number (a -> 97, b -> 98, ...)
char_to_ascii(){
    char=$(printf '%d' "'$char")
}

# converts character's ascii to its index number (a -> 1, b -> 2, ...)
ascii_to_index(){
    char=$(($char-96))
}

find_key_encryption(){

    file_to_lowercase

    # loop through the words of the string (splitting on whitespace)
    for word in $file_content_lower; do

        # loop through characters of each word
        while read -n1 char; do
            char_to_ascii
            ascii_to_index
            sum=$(($sum + $char))
        done < <(echo -n "$word")

        # modulo 256 to keep the key at 8-bit length, then assign the max sum to the key
        sum=$(($sum % 256))
        if [ $sum -gt $key ]; then
            key=$sum
        fi
        sum=0
    done
}

# copy the contents of text file into the variable 'file_content'
get_file_content(){
    file_content=$(cat $file_name)
}

# convert a string into lowercase
file_to_lowercase(){
    file_content_lower=$(echo $file_content | tr '[:upper:]' '[:lower:]')
}

# prints the key as an integer and binary number
print_key(){
    binary_key=$(echo "obase=2;$key" | bc)
    echo "Key in decimal: $key"
    echo "Key in binary:  $binary_key"
    echo ""
}

encrypt_to_file(){
    # make sure the file is empty
    > $file_name

    # loop through characters of the file content
    while LANG=C IFS= read -r -d '' -n 1 char ;do
        char_to_ascii
        xor
        swap
        ascii_to_char
        printf '%c' "$char" >> $file_name
    done < <(echo -n "$file_content")

    # swap the key then add it to the file
    char=$key
    swap
    ascii_to_char
    printf '%c' "$char" >> $file_name

}

# the result of XORing the key and a charcter is stored in 'char'
xor(){
    char=$(($char ^ $key))
}

# swaps the most significant 4-bit with the least significant 4-bit
swap(){
    lower=$(($char >> 4))
    upper=$(($char & 15))
    upper=$(($upper << 4))
    char=$(($upper | $lower))
}

encryption(){
    read_plain_filename
    check_file_exist
    get_file_content
    check_file_content
    find_key_encryption
    print_key
    read_cipher_filename
    encrypt_to_file
}


# finds the as it is the last character in the file, then swaps its bits
find_key_decryption(){
    char=$(tail -c 1 $file_name)
    char_to_ascii
    swap
    key=$char
}


# converts ascii number to character (97 -> a, 98 -> b, ...)
ascii_to_char() {
  char=$(printf "\\$(printf '%03o' "$char")")
}

decrypt_to_file(){
    # make sure the file is empty
    > $file_name

    file_content=${file_content::-1}
    # loop through characters of the file content
    while LANG=C IFS= read -r -d '' -n 1 char ;do
        char_to_ascii
        swap
        xor
        ascii_to_char
        printf '%c' "$char">> $file_name
    done < <(echo -n "$file_content")
}

decryption(){
    read_cipher_filename
    check_file_exist
    get_file_content
    find_key_decryption
    print_key
    read_plain_filename
    decrypt_to_file
}

#if the file doesn't exist then show a warning
check_file_exist(){
	if [ ! -e $file_name ]; then
		msg_file_dne
		menu_1_function
	fi
}

#check if the file only contains alphabetic characters and spaces.
check_file_content(){
    if [[ "${file_content}" =~ [^a-zA-Z[:space:]] ]]; then
        msg_bad_file
    fi
}

key=0
sum=0

msg_welcome
main_menu